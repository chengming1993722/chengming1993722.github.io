{"title":"nametuple","date":"2018-07-31T06:32:25.000Z","excerpt":"","slug":"nametuple","updated":"2018-08-01T01:47:15.989Z","content":"<h3 id=\"python3-nametuple使用\"><a href=\"#python3-nametuple使用\" class=\"headerlink\" title=\"python3 nametuple使用\"></a>python3 nametuple使用</h3><h4 id=\"namedtuple是继承自tuple的子类。namedtuple创建一个和tuple类似的对象，而且对象拥有可访问的属性\"><a href=\"#namedtuple是继承自tuple的子类。namedtuple创建一个和tuple类似的对象，而且对象拥有可访问的属性\" class=\"headerlink\" title=\"namedtuple是继承自tuple的子类。namedtuple创建一个和tuple类似的对象，而且对象拥有可访问的属性\"></a>namedtuple是继承自tuple的子类。namedtuple创建一个和tuple类似的对象，而且对象拥有可访问的属性</h4><p>collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)  </p>\n<p>返回名为typename的新元组子类。新子类用于创建类似元组的对象，这些对象具有可通过属性查找访问的字段以及可索引<br>和可​​迭代的字段。子类的实例还有一个有用的docstring（带有typename和field_names）和一个有用的<strong>repr </strong>（）方法，<br>它以name = value格式列出元组内容</p>\n<pre><code>from collections import namedtuple\n#定义一个商品类型goods, 商品拥有name,number,price属性\nGoods = namedtuple(&apos;Goods&apos;,[&apos;name&apos;,&apos;number&apos;,&apos;price&apos;])\n#创建一个Goods对象\ngoods = Goods(name=&apos;apple&apos;,number=3,price=2.5)\n#也可以使用_make方法来创建一个Goods对象\ngoods = Goods._make([&apos;apple&apos;,3,2.5])\nprint(goods.number*goods.price)\n# result : 1\nname,number,price=goods\nprint(f&quot;{name}&apos;s price is {price}$ per kilogram,which has {number}kg,so tottal price is {number*price}$&quot;)\n</code></pre><h4 id=\"make-iterable-方法：用一个已存在的序列或可迭代的对象生成实例\"><a href=\"#make-iterable-方法：用一个已存在的序列或可迭代的对象生成实例\" class=\"headerlink\" title=\"_make(iterable)方法：用一个已存在的序列或可迭代的对象生成实例\"></a>_make(iterable)方法：用一个已存在的序列或可迭代的对象生成实例</h4><pre><code>orange = [&apos;orange&apos;,&apos;2&apos;,&apos;4&apos;]\ngoods = Goods._make(orange)\nprint(goods)\n# result : Goods(name=&apos;orange&apos;, number=&apos;2&apos;, price=&apos;4&apos;)\norange=(&apos;orange&apos;,&apos;2&apos;,&apos;4&apos;)\ngoods = Goods._make(orange)\nprint(goods)\n# result : Goods(name=&apos;orange&apos;, number=&apos;2&apos;, price=&apos;4&apos;)\n</code></pre><h4 id=\"asdict-返回一个OrderedDict\"><a href=\"#asdict-返回一个OrderedDict\" class=\"headerlink\" title=\"_asdict() : 返回一个OrderedDict\"></a>_asdict() : 返回一个OrderedDict</h4><pre><code>org = goods._asdict()\n#result : OrderedDict([(&apos;name&apos;, &apos;orange&apos;), (&apos;number&apos;, &apos;2&apos;), (&apos;price&apos;, &apos;4&apos;)])\n</code></pre><h4 id=\"replace-kwargs-替换指定属性的值\"><a href=\"#replace-kwargs-替换指定属性的值\" class=\"headerlink\" title=\"_replace(*kwargs) : 替换指定属性的值\"></a>_replace(*kwargs) : 替换指定属性的值</h4><pre><code>goods._replace(name=&apos;juice&apos;)\nprint(goods._replace(name=&apos;juice&apos;))\n$ result : Goods(name=&apos;juice&apos;, number=&apos;2&apos;, price=&apos;4&apos;)\n</code></pre><h4 id=\"fields-：-返回一个包含Goods对象属性（’name’-’number’-’price’）的元组\"><a href=\"#fields-：-返回一个包含Goods对象属性（’name’-’number’-’price’）的元组\" class=\"headerlink\" title=\"_fields ： 返回一个包含Goods对象属性（’name’,’number’,’price’）的元组\"></a>_fields ： 返回一个包含Goods对象属性（’name’,’number’,’price’）的元组</h4><pre><code>print(goods._fileds)\n#return : （&apos;name&apos;,&apos;number&apos;,&apos;price&apos;）\n</code></pre><h4 id=\"fields-defaults-设置默认值\"><a href=\"#fields-defaults-设置默认值\" class=\"headerlink\" title=\"_fields_defaults: 设置默认值\"></a>_fields_defaults: 设置默认值</h4><pre><code>***注：此方法为python3.7 新加的方法**\n&gt;&gt;&gt; Account = namedtuple(&apos;Account&apos;, [&apos;type&apos;, &apos;balance&apos;], defaults=[0])\n&gt;&gt;&gt; Account._fields_defaults\n{&apos;balance&apos;: 0}\n&gt;&gt;&gt; Account(&apos;premium&apos;)\nAccount(type=&apos;premium&apos;, balance=0)\n</code></pre><h4 id=\"一些用法\"><a href=\"#一些用法\" class=\"headerlink\" title=\"一些用法\"></a>一些用法</h4><pre><code>&gt;&gt;&gt;getattr(goods, &apos;name&apos;)\norange\n&gt;&gt;&gt;apple = {&apos;name&apos;:&apos;apple&apos;,&apos;number&apos;:3,&apos;price&apos;:5}\n&gt;&gt;&gt;goods = Goods(**apple)\nGoods(name=&apos;apple&apos;, number=3, price=5)\n\n&apos;&apos;&apos;&apos; 星号*把序列/集合解包（unpack）成位置参数，两个星号**把字典解包成关键字参数 &apos;&apos;&apos;\n</code></pre>","next":{"title":"Hello World","slug":"hello-world"},"link":"/2018/07/31"}