{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"Tomorrow","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-12-26T06:41:21.000Z","updated":"2018-12-26T06:41:21.168Z","comments":true,"path":"tags/index-1.html","permalink":"http://yoursite.com/tags/index-1.html","excerpt":"","text":""}],"posts":[{"title":"reverseListNode","slug":"reverseListNode","date":"2019-02-28T03:24:54.000Z","updated":"2019-02-28T03:29:21.541Z","comments":true,"path":"2019/02/28/reverseListNode/","link":"","permalink":"http://yoursite.com/2019/02/28/reverseListNode/","excerpt":"","text":"ReverseListNodeclass ListNode: def __init__(self, x): self.val = x self.next = None def nodereverse(head): if head is None and head.next is None: return head pre = None while head: &apos;&apos;&apos;先用tmp保存head的下一个节点信息&apos;&apos;&apos; tmp = head.next &apos;&apos;&apos;让head指向pre&apos;&apos;&apos; head.next = pre pre = head head = tmp return pre head = ListNode(1); # 测试代码 p1 = ListNode(2); # 建立链表1-&gt;2-&gt;3-&gt;4-&gt;None; p2 = ListNode(3); p3 = ListNode(4); head.next = p1; p1.next = p2; p2.next = p3; p = nodereverse(head); # 输出链表 4-&gt;3-&gt;2-&gt;1-&gt;None print(p) while p: print(p.val) p = p.next","categories":[{"name":"ListNode","slug":"ListNode","permalink":"http://yoursite.com/categories/ListNode/"}],"tags":[{"name":"sort","slug":"sort","permalink":"http://yoursite.com/tags/sort/"}]},{"title":"SortSkill","slug":"SortSkill","date":"2019-02-21T07:55:25.000Z","updated":"2019-02-21T08:00:21.872Z","comments":true,"path":"2019/02/21/SortSkill/","link":"","permalink":"http://yoursite.com/2019/02/21/SortSkill/","excerpt":"","text":"排序大小写字母数字s = &quot;SortIng1234&quot; f1 = &quot;&quot;.join(sorted(s, key=lambda x: (x.isdigit(), x.isdigit() and int(x) % 2 == 0, x, x.isupper(), x.islower()),reverse=True)) print(f) s = &quot;SortIng1234&quot; m = &quot;&quot;.join(sorted(s, key=lambda x: (x, x.isdigit(), x.isdigit() and int(x) % 2 == 0, x.isupper(), x.islower()))) print(m) s = &quot;SortIng1234&quot; f2 = &quot;&quot;.join(sorted(s, key=lambda x: (x.isdigit(), x.isdigit() and int(x) % 2 == 0, x.isupper(), x.islower(), x))) print(f) a = &apos;1232312312340&apos; f3 = &quot;&quot;.join(sorted(a, key=lambda x: (x.isdigit() and int(x) % 2 == 0, x.isdigit(),))) print(f) a = &apos;1232312312340&apos; f4 = &quot;&quot;.join(sorted(a, key=lambda x: (x.isdigit() and int(x) % 2 == 0, x.isdigit(), x))) print(f)","categories":[],"tags":[]},{"title":"DataFrame数据统计","slug":"DataFrame数据统计","date":"2018-08-22T11:18:16.000Z","updated":"2018-12-26T06:40:58.648Z","comments":true,"path":"2018/08/22/DataFrame数据统计/","link":"","permalink":"http://yoursite.com/2018/08/22/DataFrame数据统计/","excerpt":"","text":"DataFrame 统计数据条目DataFrame.groupby(‘列名’).count()rtn.groupby(&apos;s_hw_everyday_level&apos;).count() # 统计各级‘s_hw_everyday_level’的个数 DataFrame[‘列名’].shapertn[&apos;s_hw_everyday_level].shape #返回DateFrame的列数 DataFrame[‘列名’]rtn[&apos;s_hw_everyday_level].count #返回&apos;s_hw_everyday_level&apos;的数量","categories":[{"name":"DataFrame","slug":"DataFrame","permalink":"http://yoursite.com/categories/DataFrame/"}],"tags":[{"name":"groupby,列操作","slug":"groupby-列操作","permalink":"http://yoursite.com/tags/groupby-列操作/"}]},{"title":"nametuple","slug":"nametuple","date":"2018-07-31T06:32:25.000Z","updated":"2018-08-01T01:47:15.989Z","comments":true,"path":"2018/07/31/nametuple/","link":"","permalink":"http://yoursite.com/2018/07/31/nametuple/","excerpt":"","text":"python3 nametuple使用namedtuple是继承自tuple的子类。namedtuple创建一个和tuple类似的对象，而且对象拥有可访问的属性collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None) 返回名为typename的新元组子类。新子类用于创建类似元组的对象，这些对象具有可通过属性查找访问的字段以及可索引和可​​迭代的字段。子类的实例还有一个有用的docstring（带有typename和field_names）和一个有用的repr （）方法，它以name = value格式列出元组内容 from collections import namedtuple #定义一个商品类型goods, 商品拥有name,number,price属性 Goods = namedtuple(&apos;Goods&apos;,[&apos;name&apos;,&apos;number&apos;,&apos;price&apos;]) #创建一个Goods对象 goods = Goods(name=&apos;apple&apos;,number=3,price=2.5) #也可以使用_make方法来创建一个Goods对象 goods = Goods._make([&apos;apple&apos;,3,2.5]) print(goods.number*goods.price) # result : 1 name,number,price=goods print(f&quot;{name}&apos;s price is {price}$ per kilogram,which has {number}kg,so tottal price is {number*price}$&quot;) _make(iterable)方法：用一个已存在的序列或可迭代的对象生成实例orange = [&apos;orange&apos;,&apos;2&apos;,&apos;4&apos;] goods = Goods._make(orange) print(goods) # result : Goods(name=&apos;orange&apos;, number=&apos;2&apos;, price=&apos;4&apos;) orange=(&apos;orange&apos;,&apos;2&apos;,&apos;4&apos;) goods = Goods._make(orange) print(goods) # result : Goods(name=&apos;orange&apos;, number=&apos;2&apos;, price=&apos;4&apos;) _asdict() : 返回一个OrderedDictorg = goods._asdict() #result : OrderedDict([(&apos;name&apos;, &apos;orange&apos;), (&apos;number&apos;, &apos;2&apos;), (&apos;price&apos;, &apos;4&apos;)]) _replace(*kwargs) : 替换指定属性的值goods._replace(name=&apos;juice&apos;) print(goods._replace(name=&apos;juice&apos;)) $ result : Goods(name=&apos;juice&apos;, number=&apos;2&apos;, price=&apos;4&apos;) _fields ： 返回一个包含Goods对象属性（’name’,’number’,’price’）的元组print(goods._fileds) #return : （&apos;name&apos;,&apos;number&apos;,&apos;price&apos;） _fields_defaults: 设置默认值***注：此方法为python3.7 新加的方法** &gt;&gt;&gt; Account = namedtuple(&apos;Account&apos;, [&apos;type&apos;, &apos;balance&apos;], defaults=[0]) &gt;&gt;&gt; Account._fields_defaults {&apos;balance&apos;: 0} &gt;&gt;&gt; Account(&apos;premium&apos;) Account(type=&apos;premium&apos;, balance=0) 一些用法&gt;&gt;&gt;getattr(goods, &apos;name&apos;) orange &gt;&gt;&gt;apple = {&apos;name&apos;:&apos;apple&apos;,&apos;number&apos;:3,&apos;price&apos;:5} &gt;&gt;&gt;goods = Goods(**apple) Goods(name=&apos;apple&apos;, number=3, price=5) &apos;&apos;&apos;&apos; 星号*把序列/集合解包（unpack）成位置参数，两个星号**把字典解包成关键字参数 &apos;&apos;&apos;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-07-27T06:56:23.728Z","updated":"2018-07-27T06:56:23.728Z","comments":true,"path":"2018/07/27/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}